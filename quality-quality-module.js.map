{"version":3,"sources":["webpack:///./src/app/@theme/services/permission.service.ts","webpack:///./src/app/@theme/services/quality.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAA2C;AACW;AACX;AACyC;AAKpF;IAEE,2BAAoB,YAAsB,EAAU,UAAsB;QAAtD,iBAAY,GAAZ,YAAY,CAAU;QAAU,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAE/E,8CAAkB,GAAlB,UAAmB,KAAK,EAAE,OAAO;QAC/B,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,+FAAmB,CAAC,CAAC;QAC9D,SAAS,CAAC,iBAAiB,CAAC,OAAO,GAAG,OAAO,CAAC;QAC9C,SAAS,CAAC,iBAAiB,CAAC,SAAS,GAAG,KAAK,CAAC;QAC9C,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,MAAW;YAChC,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAXU,iBAAiB;QAH7B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAGkC,mEAAQ,EAAsB,uDAAU;OAF/D,iBAAiB,CAa7B;IAAD,wBAAC;CAAA;AAb6B;;;;;;;;;;;;;;;;;;;;;;;;;;ACRa;AACA;AAM3C;IAEE,wBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAI,CAAC;IAE/C,0CAAiB,GAAjB,UAAkB,IAAK;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;IAED,mCAAU,GAAV,UAAW,OAAO;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACnE,CAAC;IAED,uCAAc,GAAd,UAAe,EAAE;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,sBAAsB,GAAG,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,oCAAW,GAAX;QACE,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;IAC9D,CAAC;IAED,6CAAoB,GAApB,UAAqB,IAAI;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,sBAAsB,GAAG,IAAI,CAAC,CAAC;IACzE,CAAC;IAED,sCAAa,GAAb,UAAc,OAAO;QACnB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC;IAED,0CAAiB,GAAjB,UAAkB,EAAE;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,eAAe,GAAG,EAAE,CAAC,CAAC;IAChE,CAAC;IA9BU,cAAc;QAH1B,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAGgC,uDAAU;OAF/B,cAAc,CA+B1B;IAAD,qBAAC;CAAA;AA/B0B","file":"quality-quality-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ApiService } from './api.service';\r\nimport { PermissionComponent } from '../components/permission/permission.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PermissionService {\r\n\r\n  constructor(private modalService: NgbModal, private apiService: ApiService) { }\r\n\r\n  callPermissionView(title, message): any {\r\n    const dialogRef = this.modalService.open(PermissionComponent);\r\n    dialogRef.componentInstance.message = message;\r\n    dialogRef.componentInstance.titleFrom = title;\r\n    dialogRef.result.then((result: any) => {\r\n      return result;\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ApiService } from './api.service';\r\nimport { id } from '@swimlane/ngx-charts/release/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QualityService {\r\n\r\n  constructor(private apiService: ApiService) { }\r\n\r\n  getAllQualityData(data?) {\r\n    return this.apiService.apiCaller('post', '/qualityData', data);\r\n  }\r\n\r\n  addQuality(quality) {\r\n    return this.apiService.apiCaller('post', '/addQuality', quality);\r\n  }\r\n\r\n  getQualityById(id) {\r\n    return this.apiService.apiCaller('get', '/getQualityDataById/' + id);\r\n  }\r\n\r\n  getTypeList() {\r\n    return this.apiService.apiCaller('get', '/qualityTypeList');\r\n  }\r\n\r\n  getSubTypeListByType(type) {\r\n    return this.apiService.apiCaller('get', '/qualitySubTypeList/' + type);\r\n  }\r\n\r\n  updateQuality(quality) {\r\n    return this.apiService.apiCaller('post', '/updateQuality', quality);\r\n  }\r\n\r\n  deleteQualityById(id) {\r\n    return this.apiService.apiCaller('get', '/qualityData/' + id);\r\n  }\r\n}\r\n"],"sourceRoot":""}