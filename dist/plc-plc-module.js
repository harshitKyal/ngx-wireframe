(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["plc-plc-module"],{

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/app/plc/plc-routing.module.ts":
/*!*******************************************!*\
  !*** ./src/app/plc/plc-routing.module.ts ***!
  \*******************************************/
/*! exports provided: PlcRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlcRoutingModule", function() { return PlcRoutingModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _plc_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plc.component */ "./src/app/plc/plc.component.ts");
/* harmony import */ var _view_plc_view_plc_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./view-plc/view-plc.component */ "./src/app/plc/view-plc/view-plc.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};




var routes = [
    {
        path: '',
        component: _plc_component__WEBPACK_IMPORTED_MODULE_2__["PlcComponent"],
        children: [{
                path: '',
                component: _view_plc_view_plc_component__WEBPACK_IMPORTED_MODULE_3__["ViewPlcComponent"]
            }]
    },
];
var PlcRoutingModule = /** @class */ (function () {
    function PlcRoutingModule() {
    }
    PlcRoutingModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forChild(routes)],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]]
        })
    ], PlcRoutingModule);
    return PlcRoutingModule;
}());



/***/ }),

/***/ "./src/app/plc/plc.component.html":
/*!****************************************!*\
  !*** ./src/app/plc/plc.component.html ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<ngx-sample-plc-layout>\r\n  <router-outlet></router-outlet>\r\n</ngx-sample-plc-layout>\r\n<!-- <button nbButton fullWidth status=\"success\" (click)=\"onClick()\">\r\n    ON\r\n  </button> -->"

/***/ }),

/***/ "./src/app/plc/plc.component.scss":
/*!****************************************!*\
  !*** ./src/app/plc/plc.component.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BsYy9wbGMuY29tcG9uZW50LnNjc3MifQ== */"

/***/ }),

/***/ "./src/app/plc/plc.component.ts":
/*!**************************************!*\
  !*** ./src/app/plc/plc.component.ts ***!
  \**************************************/
/*! exports provided: PlcComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlcComponent", function() { return PlcComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../@core/utils */ "./src/app/@core/utils/index.ts");
/* harmony import */ var _nebular_theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @nebular/theme */ "./node_modules/@nebular/theme/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var PlcComponent = /** @class */ (function () {
    function PlcComponent(stateService, menuService, themeService, bpService, sidebarService) {
        var _this = this;
        this.stateService = stateService;
        this.menuService = menuService;
        this.themeService = themeService;
        this.bpService = bpService;
        this.sidebarService = sidebarService;
        this.layout = {};
        this.alive = true;
        this.stateService.onLayoutState()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeWhile"])(function () { return _this.alive; }))
            .subscribe(function (layout) { return _this.layout = layout; });
        this.themeService.getJsTheme()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeWhile"])(function () { return _this.alive; }))
            .subscribe(function (theme) {
            _this.currentTheme = theme.name;
        });
    }
    PlcComponent.prototype.ngOnInit = function () {
    };
    PlcComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'ngx-plc',
            template: __webpack_require__(/*! ./plc.component.html */ "./src/app/plc/plc.component.html"),
            styles: [__webpack_require__(/*! ./plc.component.scss */ "./src/app/plc/plc.component.scss")]
        }),
        __metadata("design:paramtypes", [_core_utils__WEBPACK_IMPORTED_MODULE_1__["StateService"],
            _nebular_theme__WEBPACK_IMPORTED_MODULE_2__["NbMenuService"],
            _nebular_theme__WEBPACK_IMPORTED_MODULE_2__["NbThemeService"],
            _nebular_theme__WEBPACK_IMPORTED_MODULE_2__["NbMediaBreakpointsService"],
            _nebular_theme__WEBPACK_IMPORTED_MODULE_2__["NbSidebarService"]])
    ], PlcComponent);
    return PlcComponent;
}());



/***/ }),

/***/ "./src/app/plc/plc.module.ts":
/*!***********************************!*\
  !*** ./src/app/plc/plc.module.ts ***!
  \***********************************/
/*! exports provided: PlcModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlcModule", function() { return PlcModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _plc_routing_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plc-routing.module */ "./src/app/plc/plc-routing.module.ts");
/* harmony import */ var _plc_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plc.component */ "./src/app/plc/plc.component.ts");
/* harmony import */ var _theme_theme_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../@theme/theme.module */ "./src/app/@theme/theme.module.ts");
/* harmony import */ var _view_plc_view_plc_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./view-plc/view-plc.component */ "./src/app/plc/view-plc/view-plc.component.ts");
/* harmony import */ var _status_card_status_card_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./status-card/status-card.component */ "./src/app/plc/status-card/status-card.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};







var PlcModule = /** @class */ (function () {
    function PlcModule() {
    }
    PlcModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            declarations: [_plc_component__WEBPACK_IMPORTED_MODULE_3__["PlcComponent"], _view_plc_view_plc_component__WEBPACK_IMPORTED_MODULE_5__["ViewPlcComponent"], _status_card_status_card_component__WEBPACK_IMPORTED_MODULE_6__["StatusCardComponent"]],
            imports: [
                _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                _plc_routing_module__WEBPACK_IMPORTED_MODULE_2__["PlcRoutingModule"],
                _theme_theme_module__WEBPACK_IMPORTED_MODULE_4__["ThemeModule"],
            ]
        })
    ], PlcModule);
    return PlcModule;
}());



/***/ }),

/***/ "./src/app/plc/status-card/status-card.component.scss":
/*!************************************************************!*\
  !*** ./src/app/plc/status-card/status-card.component.scss ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * This mixin generates keyfames.\n * Because of all keyframes can't be scoped,\n * we need to puts unique name in each btn-pulse call.\n */\n/*\n\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\n:host and :host-context are pseudo-classes. So we assume they could be combined,\nlike other pseudo-classes, even same ones.\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\n\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\nso direction could be overridden on any component level.\n\nImplementation code:\n\n@mixin nb-rtl() {\n  // add # to scss interpolation statement.\n  // it works in comments and we can't use it here\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\n    @content;\n  }\n}\n\nAnd when we call it somewhere:\n\n:host {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n:host-context(...) {\n  .some-class {\n    @include nb-rtl() {\n      ...\n    }\n  }\n}\n\nResult will look like:\n\n:host-context([dir=rtl]):host .some-class {\n  ...\n}\n:host-context([dir=rtl]):host-context(...) .some-class {\n  ...\n}\n\n*\n  Side note:\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\n\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\n  so order is not important.\n*\n\n\nCurrently, there're two problems with this approach:\n\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\nFor the moment of writing, the only possible way is:\n:host {\n  :host-context(...) {\n    ...\n  }\n}\nIt doesn't work for us because mixin could be called somewhere deeper, like:\n:host {\n  p {\n    @include nb-rtl() { ... }\n  }\n}\nWe are not able to go up to :host level to place content passed to mixin.\n\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\n  *\n    Side note:\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\n    :host-context($theme) once we will be able to use multiple shadow selectors.\n  *\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\n  ***\n    Possible solution\n    check if we in theme by some theme variables and if so append, otherwise nest like\n    @at-root :host-context([dir=rtl]) {\n      // add # to scss interpolation statement.\n      // it works in comments and we can't use it here\n      {&} {\n        @content;\n      }\n    }\n    What if :host specified? Can we add space in :host-context(...) :host?\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\n  ***\n\n\nProblems with the current approach.\n\n1. Direction can be applied only on document level, because mixin prepends theme class,\nwhich placed on the body.\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\nattribute to [dir=rtl] attribute as well.\n\n\nGeneral problems.\n\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\n*/\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-default :host nb-card {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 6rem;\n  overflow: visible;\n  -webkit-box-shadow: 0 0 0 0 #dbdbdb, none;\n          box-shadow: 0 0 0 0 #dbdbdb, none; }\n.nb-theme-default :host nb-card .icon-container {\n    height: 100%;\n    padding: 0.625rem; }\n.nb-theme-default :host nb-card .icon {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    width: 5.75rem;\n    height: 4.75rem;\n    font-size: 3.75rem;\n    border-radius: 0.375rem;\n    -webkit-transition: width 0.4s ease;\n    transition: width 0.4s ease;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n    -webkit-transform-style: preserve-3d;\n    -webkit-backface-visibility: hidden;\n    color: #ffffff; }\n.nb-theme-default :host nb-card .icon.primary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#b57fff), to(#8a7fff));\n      background-image: linear-gradient(to right, #b57fff, #8a7fff);\n      -webkit-box-shadow: 0 0 0 0 #896ddb, 0 0 0 0 #9f7fff;\n              box-shadow: 0 0 0 0 #896ddb, 0 0 0 0 #9f7fff; }\n.nb-theme-default :host nb-card .icon.success {\n      background-image: -webkit-gradient(linear, left top, right top, from(#40dcb2), to(#40dc7e));\n      background-image: linear-gradient(to right, #40dcb2, #40dc7e);\n      -webkit-box-shadow: 0 0 0 0 #37bd83, 0 0 0 0 #40dc98;\n              box-shadow: 0 0 0 0 #37bd83, 0 0 0 0 #40dc98; }\n.nb-theme-default :host nb-card .icon.info {\n      background-image: -webkit-gradient(linear, left top, right top, from(#4cc4ff), to(#4ca6ff));\n      background-image: linear-gradient(to right, #4cc4ff, #4ca6ff);\n      -webkit-box-shadow: 0 0 0 0 #419cdb, 0 0 0 0 #4cb5ff;\n              box-shadow: 0 0 0 0 #419cdb, 0 0 0 0 #4cb5ff; }\n.nb-theme-default :host nb-card .icon.warning {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ffcc00), to(#ffa100));\n      background-image: linear-gradient(to right, #ffcc00, #ffa100);\n      -webkit-box-shadow: 0 0 0 0 #db9d00, 0 0 0 0 #ffb600;\n              box-shadow: 0 0 0 0 #db9d00, 0 0 0 0 #ffb600; }\n.nb-theme-default :host nb-card .icon.danger {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ff4ca6), to(#ff4c6a));\n      background-image: linear-gradient(to right, #ff4ca6, #ff4c6a);\n      -webkit-box-shadow: 0 0 0 0 #db4175, 0 0 0 0 #ff4c88;\n              box-shadow: 0 0 0 0 #db4175, 0 0 0 0 #ff4c88; }\n.nb-theme-default :host nb-card .icon.secondary {\n      background-color: transparent;\n      -webkit-box-shadow: 0 0 0 0 #bbbec6, 0 0 0 0 #dadde6;\n              box-shadow: 0 0 0 0 #bbbec6, 0 0 0 0 #dadde6;\n      color: #a4abb3; }\n.nb-theme-default :host nb-card:hover {\n    background: white; }\n.nb-theme-default :host nb-card:hover .icon.primary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#bf91ff), to(#9a91ff));\n      background-image: linear-gradient(to right, #bf91ff, #9a91ff); }\n.nb-theme-default :host nb-card:hover .icon.success {\n      background-image: -webkit-gradient(linear, left top, right top, from(#5be1bd), to(#5be190));\n      background-image: linear-gradient(to right, #5be1bd, #5be190); }\n.nb-theme-default :host nb-card:hover .icon.info {\n      background-image: -webkit-gradient(linear, left top, right top, from(#65ccff), to(#65b2ff));\n      background-image: linear-gradient(to right, #65ccff, #65b2ff); }\n.nb-theme-default :host nb-card:hover .icon.warning {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ffd324), to(#ffae24));\n      background-image: linear-gradient(to right, #ffd324, #ffae24); }\n.nb-theme-default :host nb-card:hover .icon.danger {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ff65b2), to(#ff657f));\n      background-image: linear-gradient(to right, #ff65b2, #ff657f); }\n.nb-theme-default :host nb-card:hover .icon.secondary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#dfe0ea), to(rgba(255, 255, 255, 0.14)));\n      background-image: linear-gradient(to right, #dfe0ea, rgba(255, 255, 255, 0.14)); }\n.nb-theme-default :host nb-card.off {\n    color: #a4abb3; }\n.nb-theme-default :host nb-card.off .icon {\n      color: #a4abb3; }\n.nb-theme-default :host nb-card.off .icon.primary, .nb-theme-default :host nb-card.off .icon.success, .nb-theme-default :host nb-card.off .icon.info, .nb-theme-default :host nb-card.off .icon.warning, .nb-theme-default :host nb-card.off .icon.danger {\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        background-image: -webkit-gradient(linear, left top, right top, from(transparent), to(transparent));\n        background-image: linear-gradient(to right, transparent, transparent); }\n.nb-theme-default :host nb-card.off .icon.secondary {\n        background: transparent; }\n.nb-theme-default :host nb-card.off .title {\n      color: #a4abb3; }\n.nb-theme-default :host nb-card .details {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    height: 100%;\n    border-left: 1px solid transparent; }\n[dir=ltr] .nb-theme-default :host nb-card .details {\n      padding: 0 0.5rem 0 0.75rem; }\n[dir=rtl] .nb-theme-default :host nb-card .details {\n      padding: 0 0.75rem 0 0.5rem; }\n.nb-theme-default :host nb-card .title {\n    font-family: Exo;\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: #2a2a2a; }\n.nb-theme-default :host nb-card .status {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #2a2a2a; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-cosmic :host nb-card {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 6rem;\n  overflow: visible;\n  -webkit-box-shadow: 0 3px 0 0 #342f6e, 0 4px 10px 0 rgba(33, 7, 77, 0.5);\n          box-shadow: 0 3px 0 0 #342f6e, 0 4px 10px 0 rgba(33, 7, 77, 0.5); }\n.nb-theme-cosmic :host nb-card .icon-container {\n    height: 100%;\n    padding: 0.625rem; }\n.nb-theme-cosmic :host nb-card .icon {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    width: 5.75rem;\n    height: 4.75rem;\n    font-size: 3.75rem;\n    border-radius: 0.5rem;\n    -webkit-transition: width 0.4s ease;\n    transition: width 0.4s ease;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n    -webkit-transform-style: preserve-3d;\n    -webkit-backface-visibility: hidden;\n    color: #ffffff; }\n.nb-theme-cosmic :host nb-card .icon.primary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ad59ff), to(#7659ff));\n      background-image: linear-gradient(to right, #ad59ff, #7659ff);\n      -webkit-box-shadow: 0 3px 0 0 #7e4ddb, 0 2px 8px 0 #9259ff, 0 4px 10px 0 rgba(33, 7, 77, 0.5);\n              box-shadow: 0 3px 0 0 #7e4ddb, 0 2px 8px 0 #9259ff, 0 4px 10px 0 rgba(33, 7, 77, 0.5); }\n.nb-theme-cosmic :host nb-card .icon.success {\n      background-image: -webkit-gradient(linear, left top, right top, from(#00d9bf), to(#00d977));\n      background-image: linear-gradient(to right, #00d9bf, #00d977);\n      -webkit-box-shadow: 0 3px 0 0 #00bb85, 0 2px 8px 0 #00d99b, 0 4px 10px 0 rgba(33, 7, 77, 0.5);\n              box-shadow: 0 3px 0 0 #00bb85, 0 2px 8px 0 #00d99b, 0 4px 10px 0 rgba(33, 7, 77, 0.5); }\n.nb-theme-cosmic :host nb-card .icon.info {\n      background-image: -webkit-gradient(linear, left top, right top, from(#00b3ff), to(#0088ff));\n      background-image: linear-gradient(to right, #00b3ff, #0088ff);\n      -webkit-box-shadow: 0 3px 0 0 #0087db, 0 2px 8px 0 #009dff, 0 4px 10px 0 rgba(33, 7, 77, 0.5);\n              box-shadow: 0 3px 0 0 #0087db, 0 2px 8px 0 #009dff, 0 4px 10px 0 rgba(33, 7, 77, 0.5); }\n.nb-theme-cosmic :host nb-card .icon.warning {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ffcc00), to(#ffa100));\n      background-image: linear-gradient(to right, #ffcc00, #ffa100);\n      -webkit-box-shadow: 0 3px 0 0 #db9d00, 0 2px 8px 0 #ffb600, 0 4px 10px 0 rgba(33, 7, 77, 0.5);\n              box-shadow: 0 3px 0 0 #db9d00, 0 2px 8px 0 #ffb600, 0 4px 10px 0 rgba(33, 7, 77, 0.5); }\n.nb-theme-cosmic :host nb-card .icon.danger {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ff38ac), to(#ff386a));\n      background-image: linear-gradient(to right, #ff38ac, #ff386a);\n      -webkit-box-shadow: 0 3px 0 0 #db3078, 0 2px 8px 0 #ff388b, 0 4px 10px 0 rgba(33, 7, 77, 0.5);\n              box-shadow: 0 3px 0 0 #db3078, 0 2px 8px 0 #ff388b, 0 4px 10px 0 rgba(33, 7, 77, 0.5); }\n.nb-theme-cosmic :host nb-card .icon.secondary {\n      background-color: transparent;\n      -webkit-box-shadow: 0 3px 0 0 #7e4ddb, 0 2px 8px 0 #9259ff, 0 4px 10px 0 rgba(33, 7, 77, 0.5);\n              box-shadow: 0 3px 0 0 #7e4ddb, 0 2px 8px 0 #9259ff, 0 4px 10px 0 rgba(33, 7, 77, 0.5);\n      color: #a1a1e5; }\n.nb-theme-cosmic :host nb-card:hover {\n    background: #463f92; }\n.nb-theme-cosmic :host nb-card:hover .icon.primary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#b970ff), to(#8970ff));\n      background-image: linear-gradient(to right, #b970ff, #8970ff); }\n.nb-theme-cosmic :host nb-card:hover .icon.success {\n      background-image: -webkit-gradient(linear, left top, right top, from(#24dec8), to(#24de8a));\n      background-image: linear-gradient(to right, #24dec8, #24de8a); }\n.nb-theme-cosmic :host nb-card:hover .icon.info {\n      background-image: -webkit-gradient(linear, left top, right top, from(#24bdff), to(#2499ff));\n      background-image: linear-gradient(to right, #24bdff, #2499ff); }\n.nb-theme-cosmic :host nb-card:hover .icon.warning {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ffd324), to(#ffae24));\n      background-image: linear-gradient(to right, #ffd324, #ffae24); }\n.nb-theme-cosmic :host nb-card:hover .icon.danger {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ff54b8), to(#ff547f));\n      background-image: linear-gradient(to right, #ff54b8, #ff547f); }\n.nb-theme-cosmic :host nb-card:hover .icon.secondary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#b970ff), to(rgba(255, 255, 255, 0.14)));\n      background-image: linear-gradient(to right, #b970ff, rgba(255, 255, 255, 0.14)); }\n.nb-theme-cosmic :host nb-card.off {\n    color: #a1a1e5; }\n.nb-theme-cosmic :host nb-card.off .icon {\n      color: #a1a1e5; }\n.nb-theme-cosmic :host nb-card.off .icon.primary, .nb-theme-cosmic :host nb-card.off .icon.success, .nb-theme-cosmic :host nb-card.off .icon.info, .nb-theme-cosmic :host nb-card.off .icon.warning, .nb-theme-cosmic :host nb-card.off .icon.danger {\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        background-image: -webkit-gradient(linear, left top, right top, from(transparent), to(transparent));\n        background-image: linear-gradient(to right, transparent, transparent); }\n.nb-theme-cosmic :host nb-card.off .icon.secondary {\n        background: transparent; }\n.nb-theme-cosmic :host nb-card.off .title {\n      color: #a1a1e5; }\n.nb-theme-cosmic :host nb-card .details {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    height: 100%;\n    border-left: 1px solid transparent; }\n[dir=ltr] .nb-theme-cosmic :host nb-card .details {\n      padding: 0 0.5rem 0 0.75rem; }\n[dir=rtl] .nb-theme-cosmic :host nb-card .details {\n      padding: 0 0.75rem 0 0.5rem; }\n.nb-theme-cosmic :host nb-card .title {\n    font-family: Exo;\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: #ffffff; }\n.nb-theme-cosmic :host nb-card .status {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #ffffff; }\n[dir=ltr] .nb-theme-cosmic :host nb-card.off .icon-container {\n  border-right: 1px solid #342e73; }\n[dir=rtl] .nb-theme-cosmic :host nb-card.off .icon-container {\n  border-left: 1px solid #342e73; }\n.nb-theme-cosmic :host nb-card .icon-container {\n  padding: 0; }\n[dir=ltr] .nb-theme-cosmic :host nb-card .details {\n  padding-left: 1.25rem; }\n[dir=rtl] .nb-theme-cosmic :host nb-card .details {\n  padding-right: 1.25rem; }\n.nb-theme-cosmic :host nb-card .icon {\n  width: 7rem;\n  height: 100%;\n  font-size: 4.5rem; }\n[dir=ltr] .nb-theme-cosmic :host nb-card .icon {\n    border-radius: 0.5rem 0 0 0.5rem; }\n[dir=rtl] .nb-theme-cosmic :host nb-card .icon {\n    border-radius: 0 0.5rem 0.5rem 0; }\n.nb-theme-cosmic :host nb-card .title {\n  font-weight: 500; }\n.nb-theme-cosmic :host nb-card .status {\n  font-weight: 300; }\n/*\n      :host can be prefixed\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\n\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\n      with something defined inside of @content, by prefixing &.\n      For example this scss code:\n        .nb-theme-default {\n          .some-selector & {\n            ...\n          }\n        }\n      Will result in next css:\n        .some-selector .nb-theme-default {\n          ...\n        }\n\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\n      prefix in one of the selectors.\n    */\n.nb-theme-corporate :host nb-card {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 6rem;\n  overflow: visible;\n  -webkit-box-shadow: 0 0 0 0 #dbdbdb, none;\n          box-shadow: 0 0 0 0 #dbdbdb, none; }\n.nb-theme-corporate :host nb-card .icon-container {\n    height: 100%;\n    padding: 0.625rem; }\n.nb-theme-corporate :host nb-card .icon {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    width: 5.75rem;\n    height: 4.75rem;\n    font-size: 3.75rem;\n    border-radius: 0.17rem;\n    -webkit-transition: width 0.4s ease;\n    transition: width 0.4s ease;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n    -webkit-transform-style: preserve-3d;\n    -webkit-backface-visibility: hidden;\n    color: #ffffff; }\n.nb-theme-corporate :host nb-card .icon.primary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#73a1ff), to(#73a1ff));\n      background-image: linear-gradient(to right, #73a1ff, #73a1ff);\n      -webkit-box-shadow: 0 0 0 0 #638adb, 0 0 20px 0 #73a1ff;\n              box-shadow: 0 0 0 0 #638adb, 0 0 20px 0 #73a1ff; }\n.nb-theme-corporate :host nb-card .icon.success {\n      background-image: -webkit-gradient(linear, left top, right top, from(#5dcfe3), to(#5dcfe3));\n      background-image: linear-gradient(to right, #5dcfe3, #5dcfe3);\n      -webkit-box-shadow: 0 0 0 0 #50b2c3, 0 0 20px 0 #5dcfe3;\n              box-shadow: 0 0 0 0 #50b2c3, 0 0 20px 0 #5dcfe3; }\n.nb-theme-corporate :host nb-card .icon.info {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ba7fec), to(#ba7fec));\n      background-image: linear-gradient(to right, #ba7fec, #ba7fec);\n      -webkit-box-shadow: 0 0 0 0 #a06dcb, 0 0 20px 0 #ba7fec;\n              box-shadow: 0 0 0 0 #a06dcb, 0 0 20px 0 #ba7fec; }\n.nb-theme-corporate :host nb-card .icon.warning {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ffa36b), to(#ffa36b));\n      background-image: linear-gradient(to right, #ffa36b, #ffa36b);\n      -webkit-box-shadow: 0 0 0 0 #db8c5c, 0 0 20px 0 #ffa36b;\n              box-shadow: 0 0 0 0 #db8c5c, 0 0 20px 0 #ffa36b; }\n.nb-theme-corporate :host nb-card .icon.danger {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ff6b83), to(#ff6b83));\n      background-image: linear-gradient(to right, #ff6b83, #ff6b83);\n      -webkit-box-shadow: 0 0 0 0 #db5c71, 0 0 20px 0 #ff6b83;\n              box-shadow: 0 0 0 0 #db5c71, 0 0 20px 0 #ff6b83; }\n.nb-theme-corporate :host nb-card .icon.secondary {\n      background-color: #edf2f5;\n      -webkit-box-shadow: 0 0 0 0 #ccd0d3, 0 0 0 0 #edf2f5;\n              box-shadow: 0 0 0 0 #ccd0d3, 0 0 0 0 #edf2f5;\n      color: #a4abb3; }\n.nb-theme-corporate :host nb-card .icon.primary, .nb-theme-corporate :host nb-card .icon.success, .nb-theme-corporate :host nb-card .icon.info, .nb-theme-corporate :host nb-card .icon.warning, .nb-theme-corporate :host nb-card .icon.danger, .nb-theme-corporate :host nb-card .icon.secondary {\n      -webkit-box-shadow: none;\n              box-shadow: none; }\n.nb-theme-corporate :host nb-card:hover {\n    background: white; }\n.nb-theme-corporate :host nb-card:hover .icon.primary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#87aeff), to(#87aeff));\n      background-image: linear-gradient(to right, #87aeff, #87aeff); }\n.nb-theme-corporate :host nb-card:hover .icon.success {\n      background-image: -webkit-gradient(linear, left top, right top, from(#74d6e7), to(#74d6e7));\n      background-image: linear-gradient(to right, #74d6e7, #74d6e7); }\n.nb-theme-corporate :host nb-card:hover .icon.info {\n      background-image: -webkit-gradient(linear, left top, right top, from(#c491ef), to(#c491ef));\n      background-image: linear-gradient(to right, #c491ef, #c491ef); }\n.nb-theme-corporate :host nb-card:hover .icon.warning {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ffb080), to(#ffb080));\n      background-image: linear-gradient(to right, #ffb080, #ffb080); }\n.nb-theme-corporate :host nb-card:hover .icon.danger {\n      background-image: -webkit-gradient(linear, left top, right top, from(#ff8094), to(#ff8094));\n      background-image: linear-gradient(to right, #ff8094, #ff8094); }\n.nb-theme-corporate :host nb-card:hover .icon.secondary {\n      background-image: -webkit-gradient(linear, left top, right top, from(#f0f4f6), to(#f0f4f6));\n      background-image: linear-gradient(to right, #f0f4f6, #f0f4f6); }\n.nb-theme-corporate :host nb-card.off {\n    color: #a4abb3; }\n.nb-theme-corporate :host nb-card.off .icon {\n      color: #a4abb3; }\n.nb-theme-corporate :host nb-card.off .icon.primary, .nb-theme-corporate :host nb-card.off .icon.success, .nb-theme-corporate :host nb-card.off .icon.info, .nb-theme-corporate :host nb-card.off .icon.warning, .nb-theme-corporate :host nb-card.off .icon.danger {\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        background-image: -webkit-gradient(linear, left top, right top, from(transparent), to(transparent));\n        background-image: linear-gradient(to right, transparent, transparent); }\n.nb-theme-corporate :host nb-card.off .icon.secondary {\n        background: transparent; }\n.nb-theme-corporate :host nb-card.off .title {\n      color: #a4abb3; }\n.nb-theme-corporate :host nb-card .details {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n        -ms-flex-direction: column;\n            flex-direction: column;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n    height: 100%;\n    border-left: 1px solid transparent; }\n[dir=ltr] .nb-theme-corporate :host nb-card .details {\n      padding: 0 0.5rem 0 0.75rem; }\n[dir=rtl] .nb-theme-corporate :host nb-card .details {\n      padding: 0 0.75rem 0 0.5rem; }\n.nb-theme-corporate :host nb-card .title {\n    font-family: Exo;\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: #181818; }\n.nb-theme-corporate :host nb-card .status {\n    font-size: 1rem;\n    font-weight: 300;\n    text-transform: uppercase;\n    color: #181818; }\n.nb-theme-corporate :host nb-card .icon-container {\n  height: auto; }\n\n/*# sourceMappingURL=data:application/json;base64, */"

/***/ }),

/***/ "./src/app/plc/status-card/status-card.component.ts":
/*!**********************************************************!*\
  !*** ./src/app/plc/status-card/status-card.component.ts ***!
  \**********************************************************/
/*! exports provided: StatusCardComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StatusCardComponent", function() { return StatusCardComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var StatusCardComponent = /** @class */ (function () {
    function StatusCardComponent() {
        this.onClickEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    StatusCardComponent.prototype.onClick = function () {
        this.onClickEvent.emit(this.on);
        this.on = !this.on;
    };
    StatusCardComponent.prototype.ngOnInit = function () {
        console.log('on', this.on);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", String)
    ], StatusCardComponent.prototype, "title", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", String)
    ], StatusCardComponent.prototype, "type", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], StatusCardComponent.prototype, "on", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"])
    ], StatusCardComponent.prototype, "onClickEvent", void 0);
    StatusCardComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'ngx-status-card',
            styles: [__webpack_require__(/*! ./status-card.component.scss */ "./src/app/plc/status-card/status-card.component.scss")],
            template: "\n    <nb-card style=\"height:451px;\" (click)=\"onClick()\" [ngClass]=\"{'off': !on}\">\n      <div class=\"icon-container\" style=\"height:451px;\">\n        <div class=\"icon {{ type }}\" style=\"height:433px;width:422px\">\n          <ng-content></ng-content>\n          <div class=\"details\">\n          <div class=\"title\">{{ title }}</div>\n          <div class=\"status\">{{ on ? 'ON' : 'OFF' }}</div>\n        </div>\n        </div>\n      </div>\n\n     \n    </nb-card>\n  ",
        }),
        __metadata("design:paramtypes", [])
    ], StatusCardComponent);
    return StatusCardComponent;
}());



/***/ }),

/***/ "./src/app/plc/view-plc/view-plc.component.html":
/*!******************************************************!*\
  !*** ./src/app/plc/view-plc/view-plc.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<nb-card>\r\n  <nb-tabset fullWidth>\r\n    <nb-tab tabTitle=\"Example 1\">\r\n      <!-- <div class=\"row mt-5\">\r\n        <div class=\"col-md-4\"></div>\r\n        <div class=\"form-control-group col-md-4\">\r\n          <label class=\"label\" for=\"email\">Duration of Light</label>\r\n          <input nbInput fullWidth type=\"number\" name=\"sec\" placeholder=\"Enter duration in seconds\" autofocus\r\n            [(ngModel)]=\"time\">\r\n        </div>\r\n      </div> -->\r\n      <br>\r\n      <br>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-4\"></div>\r\n        <div class=\"col-xxxl-3 col-md-4\">\r\n          <ngx-status-card (onClickEvent)=\"onClick($event)\" [on]=\"lightCard.onOffButton\" [title]=\"lightCard.title\"\r\n            [type]=\"lightCard.type\">\r\n            <i [ngClass]=\"lightCard.iconClass\"></i>\r\n          </ngx-status-card>\r\n        </div>\r\n      </div>\r\n    </nb-tab>\r\n    <nb-tab tabTitle=\"Example 2\">\r\n      <br>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"form-control-group column col-md-6\">\r\n          <nb-card>\r\n            <nb-card-header>Production Parameters\r\n              <button nbButton style=\"margin-left:319px\" [disabled]=\"!prodStatusChange\"\r\n                (click)=\"onChangeButton()\">Change</button>\r\n            </nb-card-header>\r\n            <nb-card-body>\r\n              <div class=\"row col-md-12\">\r\n                <div class=\"col-md-4\">\r\n                  <input nbInput fullWidth type=\"text\" name=\"sec1\" [(ngModel)]=\"ftime\">\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <input nbInput fullWidth type=\"text\" name=\"sec2\" [(ngModel)]=\"stime\">\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <input nbInput fullWidth type=\"text\" name=\"sec3\" [(ngModel)]=\"ttime\">\r\n                </div>\r\n              </div>\r\n            </nb-card-body>\r\n          </nb-card>\r\n\r\n        </div>\r\n\r\n      </div>\r\n      <br>\r\n      <div class=\"row\" *ngIf=\"!prodStatusChange\">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"form-control-group column col-md-6\">\r\n          <nb-card>\r\n            <nb-card-header>Production Status\r\n            </nb-card-header>\r\n            <nb-card-body>\r\n              {{currentStatus}}\r\n            </nb-card-body>\r\n          </nb-card>\r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"form-control-group column col-md-6\">\r\n          <nb-card>\r\n            <nb-card-header>Reports\r\n            </nb-card-header>\r\n            <nb-card-body>\r\n              <table class=\"table table-responsive\" *ngIf=\"reportList.length\">\r\n                <tr>\r\n                  <th>Operator Id</th>\r\n                  <th>Raw Material 1</th>\r\n                  <th>Raw Material 2</th>\r\n                  <th>Raw Material 3</th>\r\n                  <!-- <th>Start Time</th> -->\r\n                  <!-- <th>End Time</th> -->\r\n                  <th>Status</th>\r\n                </tr>\r\n                <tr *ngFor=\"let i of reportList\">\r\n                  <td>{{i.operatorId}}</td>\r\n                  <td>{{i.rawMaterialA}}</td>\r\n                  <td>{{i.rawMaterialB}}</td>\r\n                  <td>{{i.rawMaterialC}}</td>\r\n                  <!-- <td>{{i.startTime}}</td> -->\r\n                  <!-- <td>{{i.stopTime}}</td> -->\r\n                  <td>{{i.statusName}}</td>\r\n                </tr>\r\n              </table>\r\n              <span *ngIf=\"!reportList.length\">\r\n                No data to show!\r\n              </span>\r\n            </nb-card-body>\r\n          </nb-card>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-md-3\">\r\n        </div>\r\n        <div class=\"form-control-group column col-md-6\">\r\n          <nb-card>\r\n            <nb-card-header>Stock\r\n            </nb-card-header>\r\n            <nb-card-body>\r\n              <table class=\"table table-responsive\">\r\n                <tr>\r\n                  <th>\r\n                    Raw Material\r\n                  </th>\r\n                  <th>\r\n                    Total Quantity\r\n                  </th>\r\n                  <th>\r\n                    Available Quantity\r\n                  </th>\r\n                  <th>\r\n                    Used Quantity\r\n                  </th>\r\n                </tr>\r\n                <tr *ngFor=\"let item of rawUnused\">\r\n                  <td> {{item.name}}</td>\r\n                  <td>{{item.quantity}}</td>\r\n                  <td>{{item.quantity - item.usedQ}}</td>\r\n                  <td>{{item.usedQ}}</td>\r\n                </tr>\r\n              </table>\r\n            </nb-card-body>\r\n          </nb-card>\r\n        </div>\r\n      </div>\r\n    </nb-tab>\r\n  </nb-tabset>\r\n</nb-card>"

/***/ }),

/***/ "./src/app/plc/view-plc/view-plc.component.scss":
/*!******************************************************!*\
  !*** ./src/app/plc/view-plc/view-plc.component.scss ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BsYy92aWV3LXBsYy92aWV3LXBsYy5jb21wb25lbnQuc2NzcyJ9 */"

/***/ }),

/***/ "./src/app/plc/view-plc/view-plc.component.ts":
/*!****************************************************!*\
  !*** ./src/app/plc/view-plc/view-plc.component.ts ***!
  \****************************************************/
/*! exports provided: ViewPlcComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewPlcComponent", function() { return ViewPlcComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _theme_services_user_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../@theme/services/user.service */ "./src/app/@theme/services/user.service.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var ViewPlcComponent = /** @class */ (function () {
    function ViewPlcComponent(userService, datePipe) {
        var _this = this;
        this.userService = userService;
        this.datePipe = datePipe;
        this.lightCard = {
            title: 'Light',
            iconClass: 'nb-lightbulb',
            type: 'primary',
            onOffButton: true
        };
        this.ftime = 10;
        this.stime = 10;
        this.ttime = 10;
        this.prodStatusChange = true;
        this.reportList = [];
        this.copyReportList = [];
        this.currentStatus = '';
        this.initialFlag = true;
        this.rawMaterialList = [{ name: "Raw1", quantity: 2000, usedQ: 0 }, { name: "Raw2", quantity: 2000, usedQ: 0 }, { name: "Raw3", quantity: 2000, usedQ: 0 }];
        this.unsubscribe = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.rawUsed = [];
        this.rawUnused = [];
        this.radioGroupValue = '';
        rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"].interval(1000).subscribe(function (x) {
            _this.getModbusStatus();
            _this.getRawMaterialStatus();
        });
    }
    ViewPlcComponent.prototype.ngOnInit = function () {
        this.rawUnused = this.rawMaterialList.slice();
        this.getReport();
    };
    ViewPlcComponent.prototype.ngOnDestroy = function () {
        this.unsubscribe.next();
    };
    ViewPlcComponent.prototype.onClick = function (event) {
        var button = 1;
        if (!event) {
            button = 2;
            this.time = '';
        }
        var obj = { 'output': [button, this.time] };
        this.userService.updateLocalModbus(obj).subscribe(function (res) {
            if (res) {
            }
        });
    };
    ViewPlcComponent.prototype.getModbusStatus = function () {
        var _this = this;
        this.userService.getLocalModbus()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this.unsubscribe))
            .subscribe(function (res) {
            console.log('res', res);
            if (res[0] == 0) {
                // this.time = '';
                _this.lightCard.onOffButton = true;
            }
            else {
                // if (res[1] != this.time) {
                //   this.time = res[1]
                // }
                _this.lightCard.onOffButton = false;
            }
            console.log(_this.lightCard.onOffButton);
        });
    };
    ViewPlcComponent.prototype.onChangeButton = function () {
        this.addRawMaterial();
    };
    ViewPlcComponent.prototype.addRawMaterial = function () {
        var obj = { 'data': [1, this.ftime, this.stime, this.ttime] };
        this.userService.addRawMaterial(obj).subscribe(function (res) {
            if (res) {
            }
        });
    };
    ViewPlcComponent.prototype.getRawMaterialStatus = function () {
        var _this = this;
        this.userService.getRawMaterialStatus()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this.unsubscribe))
            .subscribe(function (res) {
            res = res[0];
            if (res !== undefined) {
                console.log('res', res);
                _this.prodStatusChange = false;
                if (res.status == 1) {
                    _this.currentStatus = 'Production Paused';
                }
                else if (res.status == 2) {
                    _this.currentStatus = 'Production Started by Operator ' + res.operatorId;
                }
                else if (res.status == 3) {
                    _this.currentStatus = 'Production stopped due to some emergency';
                    _this.prodStatusChange = true;
                    _this.copyReportList = _this.reportList.slice();
                    _this.getReport();
                }
                else if (res.status == 4) {
                    _this.currentStatus = 'Production Completed';
                    _this.prodStatusChange = true;
                    _this.copyReportList = _this.reportList.slice();
                    _this.getReport();
                }
                else if (res.status == 0) {
                    _this.currentStatus = 'Production not started yet.';
                    _this.prodStatusChange = true;
                }
            }
        });
    };
    ViewPlcComponent.prototype.getReport = function () {
        var _this = this;
        this.userService.getReport()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(this.unsubscribe))
            .subscribe(function (res) {
            _this.reportList = res;
            if (_this.reportList.length) {
                _this.reportList = _this.reportList.filter(function (v) { return v.startTime != undefined; });
            }
            if (_this.reportList.length) {
                if (_this.initialFlag) {
                    _this.copyReportList = _this.reportList.slice();
                    _this.reportList.forEach(function (report) {
                        if (report.status == 1) {
                            report['statusName'] = 'Paused';
                        }
                        else if (report.status == 2) {
                            report['statusName'] = 'Start';
                        }
                        else if (report.status == 3) {
                            report['statusName'] = 'Emergency Stop';
                        }
                        else if (report.status == 4) {
                            report['statusName'] = 'Complete';
                        }
                        report.startTime = _this.datePipe.transform(report.startTime, 'hh:MM:ss');
                        report.stopTime = _this.datePipe.transform(report.stopTime, 'hh:MM:ss');
                        _this.rawMaterialList[0].usedQ = _this.rawMaterialList[0].usedQ + report.rawMaterialA;
                        _this.rawMaterialList[1].usedQ = _this.rawMaterialList[1].usedQ + report.rawMaterialB;
                        _this.rawMaterialList[2].usedQ = _this.rawMaterialList[2].usedQ + report.rawMaterialC;
                    });
                    _this.initialFlag = false;
                }
                else {
                    _this.reportList.forEach(function (report) {
                        if (report.status == 1) {
                            report['statusName'] = 'Paused';
                        }
                        else if (report.status == 2) {
                            report['statusName'] = 'Start';
                        }
                        else if (report.status == 3) {
                            report['statusName'] = 'Emergency Stopped';
                        }
                        else if (report.status == 4) {
                            report['statusName'] = 'Complete';
                        }
                        report.startTime = _this.datePipe.transform(report.startTime, 'hh:MM:ss');
                        report.stopTime = _this.datePipe.transform(report.stopTime, 'hh:MM:ss');
                        if (_this.copyReportList.length !== _this.reportList.length) {
                            _this.rawMaterialList[0].usedQ = _this.rawMaterialList[0].usedQ + report.rawMaterialA;
                            _this.rawMaterialList[1].usedQ = _this.rawMaterialList[1].usedQ + report.rawMaterialB;
                            _this.rawMaterialList[2].usedQ = _this.rawMaterialList[2].usedQ + report.rawMaterialC;
                        }
                    });
                }
            }
        });
    };
    ViewPlcComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'ngx-view-plc',
            template: __webpack_require__(/*! ./view-plc.component.html */ "./src/app/plc/view-plc/view-plc.component.html"),
            styles: [__webpack_require__(/*! ./view-plc.component.scss */ "./src/app/plc/view-plc/view-plc.component.scss")],
            providers: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DatePipe"]]
        }),
        __metadata("design:paramtypes", [_theme_services_user_service__WEBPACK_IMPORTED_MODULE_1__["UserService"], _angular_common__WEBPACK_IMPORTED_MODULE_4__["DatePipe"]])
    ], ViewPlcComponent);
    return ViewPlcComponent;
}());

// 1-pause
// 2-start
// 3-emergency stop
// 4-complete


/***/ })

}]);
//# sourceMappingURL=plc-plc-module.js.map